"""
Solucionador de Recepci√≥n SMS - Diferentes Configuraciones
Prueba varias configuraciones para encontrar la que funciona
"""
import asyncio
from sms_engine_ultra_simple import SMSEngine

class ReceptionTester:
    def __init__(self):
        self.engine = SMSEngine()
    
    async def test_cnmi_configurations(self):
        """Prueba diferentes configuraciones CNMI"""
        
        configurations = [
            ("2,2,0,0,0", "Notificaci√≥n directa completa"),
            ("1,1,0,0,0", "Notificaci√≥n b√°sica"),
            ("2,1,0,0,0", "Almacenar y notificar"),
            ("1,2,0,0,0", "Mostrar directamente"),
            ("0,0,0,0,0", "Sin notificaciones autom√°ticas"),
            ("2,0,0,0,0", "Solo almacenar"),
        ]
        
        print("üß™ === PROBANDO CONFIGURACIONES DE RECEPCI√ìN ===\n")
        
        await self.engine.connect()
        
        for config, description in configurations:
            print(f"üîß Probando: AT+CNMI={config}")
            print(f"üìù Descripci√≥n: {description}")
            
            try:
                response = await self.engine._send_command(f"AT+CNMI={config}")
                print(f"‚úÖ √âxito: {response.strip()}")
                
                # Verificar configuraci√≥n actual
                current = await self.engine._send_command("AT+CNMI?")
                print(f"üìã Configuraci√≥n actual: {current.strip()}")
                
            except Exception as e:
                print(f"‚ùå Error: {e}")
            
            print("-" * 50)
        
        await self.engine.disconnect()
    
    async def test_manual_check(self):
        """M√©todo manual para verificar mensajes"""
        print("üì• === VERIFICACI√ìN MANUAL DE MENSAJES ===\n")
        
        await self.engine.connect()
        
        try:
            # Verificar mensajes en diferentes ubicaciones
            locations = ["SM", "ME", "MT"]
            
            for location in locations:
                print(f"üîç Verificando ubicaci√≥n: {location}")
                
                try:
                    # Seleccionar ubicaci√≥n
                    await self.engine._send_command(f'AT+CPMS="{location}"')
                    
                    # Listar mensajes
                    response = await self.engine._send_command('AT+CMGL="ALL"')
                    print(f"üìã Respuesta: {response}")
                    
                    # Contar mensajes
                    lines = response.split('\n')
                    message_count = len([line for line in lines if line.startswith('+CMGL:')])
                    print(f"üìä Mensajes encontrados: {message_count}")
                    
                except Exception as e:
                    print(f"‚ùå Error en {location}: {e}")
                
                print("-" * 30)
        
        finally:
            await self.engine.disconnect()
    
    async def setup_polling_mode(self):
        """Configura modo de polling manual"""
        print("‚öôÔ∏è === CONFIGURANDO MODO POLLING ===\n")
        
        await self.engine.connect()
        
        try:
            # Desactivar notificaciones autom√°ticas
            print("üîá Desactivando notificaciones autom√°ticas...")
            await self.engine._send_command("AT+CNMI=0,0,0,0,0")
            
            # Configurar almacenamiento en memoria
            print("üíæ Configurando almacenamiento...")
            await self.engine._send_command('AT+CPMS="ME","ME","ME"')
            
            # Verificar configuraci√≥n
            config = await self.engine._send_command("AT+CNMI?")
            storage = await self.engine._send_command("AT+CPMS?")
            
            print(f"‚úÖ Configuraci√≥n CNMI: {config.strip()}")
            print(f"‚úÖ Configuraci√≥n almacenamiento: {storage.strip()}")
            
            print("\nüîÑ Modo polling configurado correctamente")
            print("üí° Ahora el sistema verificar√° mensajes cada pocos segundos")
            
        except Exception as e:
            print(f"‚ùå Error configurando polling: {e}")
        
        finally:
            await self.engine.disconnect()

async def main():
    tester = ReceptionTester()
    
    print("üîß === DIAGN√ìSTICO DE RECEPCI√ìN SMS ===")
    print("Vamos a encontrar la configuraci√≥n correcta para tu gateway\n")
    
    # 1. Probar configuraciones CNMI
    await tester.test_cnmi_configurations()
    
    input("\n‚è∏Ô∏è Presiona Enter para continuar con verificaci√≥n manual...")
    
    # 2. Verificaci√≥n manual
    await tester.test_manual_check()
    
    input("\n‚è∏Ô∏è Presiona Enter para configurar modo polling...")
    
    # 3. Configurar polling
    await tester.setup_polling_mode()
    
    print("\n‚úÖ Diagn√≥stico completado!")

if __name__ == "__main__":
    asyncio.run(main())
